// Package file data.
const packageJson = (name) => (
    {
        "name": `${name.charAt(0).toUpperCase() + name.slice(1)}`,
        "version": "1.0.0",
        "main": "index.js",
        "scripts": {
            "start": "babel-node src/index.js",
            "test": "nyc --reporter=text mocha --require @babel/register --exit",
            "create:db": "babel-node src/scripts/createdb.js",
            "drop:db": "babel-node src/scripts/dropdb.js"
        }
    }
);

const gitIgnore =
    `# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# nyc test coverage
.nyc_output

# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# TypeScript v1 declaration files
typings/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env

# next.js build output
.next

# dist file ignored
dist/`

const readMe = (name) => (
    `# ${name.charAt(0).toUpperCase() + name.slice(1)}
This is my first app generated using kemboijs-cli

# Project setup
npm install

# Compile and Run
npm start

# Build application
npm build

# Run your tests
npm test
`
);

const babel = `{
    "presets": [
        [
            "@babel/preset-env",
            {
                "targets": {
                    "node": "current"
                }
            }
        ]
    ]
}`

const appJs =
    `import express from 'express';
import bodyParser from 'body-parser';
import cors from 'cors';
import routes from './routes';

const port = 8000;
const app = express();

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({
    extended: false
}));
app.use(cors());
app.use('/', routes);
app.use('*', (req, res) => {
    res.status(404).send({
        message: "Url not found"
    });
});

app.listen(port, () => {
    console.log("Server connected successfully")
});

export default app;
`

const userMiddleware =
    `export default function userMiddleware(req, res, next) {
    next();
}
`

const middleware = `export {default as UserMiddleware} from './user';`

const userController =
    `import {User} from '../models';
export default class UserController {
    // Create a user
    static async createUser(req, res) {
        const userDetails = req.body;
        const user = await User.create(userDetails);
        if(!user) {
            res.status(400).send({
                message: "An error occurred while creating user"
            });
        }
        res.status(201).send({
            message: "User created successfully", 
            user
        });
    }
    // Get all users from the database
    static async getUsers(req, res) {
        const users =  await User.findAll();
        if(!users || users.length <= 0) {
            return res.status(404).send({
                message: "There are no currently users"
            });
        }
        return res.status(200).send({
            message: "Successfully retrieved users successfully.",
            users
        });
    }
    // Get a single user from the db
    static async getUser(req, res) {
        const { id } = req.params;
        const user = await User.findAll({
            where: {
                id
            },
            attributes: { exclude: [ 'password' ] }
        });
        if(!user) {
            res.status(404).send({
                message: "The user with that id does not exist"
            });
        }
        res.status(200).send({
            message: "User details retrieved successfully",
            user
        })
    }
    // Update user details 
    static async updateUser(req, res) {
        const userDetails = req.body;
        const { id } = req.params;
        const user = await User.update(userDetails, {
            where: {
                id
            }
        });
        if(!user) {
            res.status(400).send({
                message: "An error occurred while creating user"
            });
        }
        res.status(200).send({
            message: "User details updated successfully", 
            user
        });
    }
    // Delete user
    static async deleteUser(req, res) {
        const { id } = req.params;
        const user = await User.destroy({
            where: {
                id
            }
        });
        res.status(200).send({
            message: "User deleted successfully"
        });
    }
}
`

const controllers = `export { default as UserController } from './user';`

const userRouter =
    `import { Router } from 'express';
import { UserController } from '../controllers';
import { UserMiddleware } from '../middlewares';

const router = new Router();

// Create a new user
router.route('/').post(
    UserMiddleware,
    UserController.createUser
);

// Get all users
router.route('/').get(
    UserMiddleware,
    UserController.getUsers
);

// Get single user
router.route('/:id').get(
    UserMiddleware,
    UserController.getUser
);

// Update user details
router.route('/:id').put(
    UserMiddleware,
    UserController.updateUser
);

// Delete a single user
router.route('/:id').delete(
    UserMiddleware,
    UserController.deleteUser
);

router.use((err, req, res, next) => {
    if (err) throw err;
});

export default router;
`

const routes =
    `import { Router } from 'express';
import userRouters from './user';

const router = new Router();

// / url
router.get('/', (req, res) => {
    res.status(200).send({
        message: "Welcome to my first app"
    });
});

router.use('/user', userRouters);

export default router;
`

const appJsTest =
    `import chai from 'chai';
import chaHttp from 'chai-http';
import app from '../src';

chai.should();
chai.use(chaHttp);

const expect = chai.expect;

describe('Testing app', () => {
    it('return base url', (done) => {
        chai.request(app)
            .get('/')
            .end((err, res) => {
                res.should.have.status(200);
                done();
            });
    });
    it('should return all users', (done) => {
        chai.request(app)
            .get('/user')
            .end((err, res) => {
                expect(err).to.be.null;
                expect(res).to.have.status(200);
                done();
            });
    });
    it('should create a new user', (done) => {
        const userData = {
            firstName: "John",
            lastName: "Doe",
            email: "johndoe@email.com",
            password: "secretpassword"
        }
        chai.request(app)
            .post('/user')
            .send(userData)
            .end((err, res) => {
                expect(err).to.be.null;
                expect(res).to.have.status(201);
                done();
            });
    });
    it('should return a single user', (done) => {
        chai.request(app)
            .get('/user/1')
            .end((err, res) => {
                expect(err).to.be.null
                expect(res).to.have.status(200)
                done();
            });
    });

    it('should update user details', (done) => {
        const userData = {
            firstName: "John1",
            email: "johndoe1@email.com",
            password: "secretpassword"
        }
        chai.request(app)
            .put('/user/1')
            .send(userData)
            .end((err, res) => {
                expect(err).to.be.null;
                expect(res).to.have.status(200);
                done();
            });
    });

    /**
     * Always delete is the last test to be done
     * In the near future, we will work on making sure we have beforeEach and afterEach hooks
     */
    it('should return delete a user', (done) => {
        chai.request(app)
            .delete('/user/1')
            .end((err, res) => {
                expect(err).to.be.null
                expect(res).to.have.status(200)
                done();
            });
    });

    it('should return 404 when route not available', (done) => {
        chai.request(app)
            .get('/notfound')
            .end((err, res) => {
                res.should.have.status(404);
                done();
            });
    });
});    
`

const sequelizeSetupData = `import Sequelize from 'sequelize';
import dotenv from 'dotenv';

dotenv.config();

const dbUrl =
  process.env.NODE_ENV === "test"
    ? process.env.TEST_DATABASE_URL
    : process.env.DATABASE_URL;

const sequelize = new Sequelize(dbUrl);

sequelize
    .authenticate()
    .then(() => {
        console.log('Connection has been established successfully.');
    })
    .catch(err => {
        console.error('Unable to connect to the database:', err);
    });
export default sequelize;
`;

const mongooseSetupData = `
    import mongoose from 'mongoose';
    const sequelize = mongoose.connect('mongodb://localhost:27017/test',
            {useNewUrlParser: true});
    sequelize.then(() =>{
            console.log('MongoDB Connection has been established successfully.')
        })
        .catch( err => {
            console.error('Unable to connect to the database:', err);
        });
    
    export default sequelize;
`;

const MongooseUserModelData = `
import mongoose from 'mongoose';

const userSchema = new mongoose.Schema({
    firstName: { type: String },
    lastName: { type: String },
    email: { type: String },
    password: { type: String }
});

export default mongoose.model("User", userSchema);
`;

const userModelData =
    `import Sequelize, { Model } from 'sequelize';
import bcrypt from 'bcrypt';
import sequelize from './setup';

export default class User extends Model { }
User.init({
    // attributes
    firstName: {
        type: Sequelize.STRING,
        allowNull: false
    },
    lastName: {
        type: Sequelize.STRING
        // allowNull defaults to true
    },
    email: {
        type: Sequelize.STRING,
        allowNull: false
    },
    password: {
        type: Sequelize.STRING,
        allowNull: false
    }
}, {
    // Can add more validation for these methods
    hooks: {
        beforeCreate: async (user, options) => {
            const salt = await bcrypt.genSaltSync(8);
            user.password = await bcrypt.hashSync(user.password, salt);
        },
        beforeUpdate: async (user, options) => {
            const salt = await bcrypt.genSaltSync(8);
            user.password = await bcrypt.hashSync(user.password, salt);
        }
    },
    // Calling instance of sequelize created in file setup.js
    sequelize,
    modelName: 'user'
    // options
    });
`

const dropDb =
    `import { User } from '../models';

User.drop(() => {
    console.log('Successfully dropped db')
}).catch(error => {
    console.log("The Error", error);
});
`

const createDb =
    `import { User } from '../models';

User.sync().then(() => {
    console.log("Successfully created User tables tables")
}).catch(error => {
    console.log("The error: ", error)
});
`

const envExample = `
TEST_DATABASE_URL="postgres://localhost:5432/dbnameTest"
DATABASE_URL="postgres://localhost:5432/dbname"
NODE_ENV="development"
`;

module.exports = {
  packageJson,
  gitIgnore,
  readMe,
  babel,
  appJs,
  appJsTest,
  userMiddleware,
  middleware,
  userController,
  controllers,
  userRouter,
  routes,
  sequelizeSetupData,
  userModelData,
  createDb,
  dropDb,
  envExample
};
